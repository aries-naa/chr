#!/bin/zsh

# chr -h                                     - подсказка
# chr -i debian|gentoo name [release [arch]] - установка
# chr -b name                                - установка пакетов для сборки
# chr -d name                                - удаление
# chr -c name                                - очистка примонтированных каталогов
# chr -p name                                - корневой каталог
# chr -a [user] name                         - добавить пользователя
# chr -u name [command]                      - использоание от имени пользователя
# chr -x user name [command]                 - использоание от имени пользователя user
# chr name [command]                         - использование

chr_modules=(~/.chr /usr/local/share/chr /usr/share/chr)
chr_home=~/chroot

check_distribution () {
    local chroot_path=${1}; [ -n "${chroot_path}" ] || return 1
    local os_release=${chroot_path}/etc/os-release

    if [ -r ${os_release} ]; then
	local distribution=$(cat ${os_release} | grep "^ID=.*" | sed 's/ID=//g'); [ -n "${distribution}" ] || return 1
	load_module ${distribution}
    else
	return 1
    fi
}

chroot_prepare () {
    # проверка существования каталогов.
    local name=$1; [ -n "${name}" ] || return 1
    local root=$2; [ -d "${root}" ] || {echo "Can't run in chroot - path ${chroot_path} not found."; return 1}
    local home="${HOME}/.chr/.home/$name"

    if [ -n "${root}"           -a \
            -d ${root}/proc     -a \
            -d ${root}/sys      -a \
            -d ${root}/dev      -a \
	    -d ${root}/dev/pts  -a \
	    -d ${root}/dev/shm  -a \
            -d ${root}/tmp      -a \
            -d ${root}/run      -a \
            -d ${home} ]; then

        # подготовка среды chroot. $(sudo fuser / 2>&1 | grep r | wc -l)

	if [ $(sudo fuser ${root} 2>&1 | grep r | wc -l) = "0" ]; then
            sudo mount --bind /proc    ${root}/proc
            sudo mount --bind /sys     ${root}/sys
            sudo mount --bind /dev     ${root}/dev
            sudo mount --bind /dev/pts ${root}/dev/pts
            sudo mount --bind /dev/shm ${root}/dev/shm
            sudo mount --bind /tmp     ${root}/tmp
            sudo mount --bind /run     ${root}/run
	    sudo mount --bind ${home}  ${root}/home
	fi

        # /etc/resolv.conf
        if [ -r /etc/resolv.conf ]; then
            sudo cp /etc/resolv.conf ${root}/etc
        fi
    else
        echo Check chroot directories:
        echo  ${root}/proc    $(if [ -d ${root}/proc ];    then echo ok; else echo fail; fi)
        echo  ${root}/sys     $(if [ -d ${root}/sys ];     then echo ok; else echo fail; fi)
	echo  ${root}/dev/pts $(if [ -d ${root}/dev/pts ]; then echo ok; else echo fail; fi)
	echo  ${root}/dev/shm $(if [ -d ${root}/dev/shm ]; then echo ok; else echo fail; fi)
        echo  ${root}/dev     $(if [ -d ${root}/dev ];     then echo ok; else echo fail; fi)
        echo  ${root}/tmp     $(if [ -d ${root}/tmp ];     then echo ok; else echo fail; fi)
        echo  ${root}/run     $(if [ -d ${root}/run ];     then echo ok; else echo fail; fi)
	echo  ${home}         $(if [ -d ${home} ];         then echo ok; else echo fail; fi)
        return 1
    fi

    return 0
}

chroot_clean () {

    # проверка существования каталогов.
    local root=$1
    [ -n "${root}" ] || return 1
    [ -d "${root}" ] || return 1

    # размнотирование.
    if [ $(sudo fuser ${root} 2>&1 | grep r | wc -l) = "0" ]; then
	sudo umount ${root}/run
	sudo umount ${root}/dev/pts
	sudo umount ${root}/dev/shm
	sudo umount ${root}/dev
	sudo umount ${root}/sys
	sudo umount ${root}/proc
	sudo umount ${root}/tmp
	sudo umount ${root}/home
    fi

    return 0
}

load_module () {
    local distribution=${1}
    [ -n "${distribution}" ] || return 1

    local module_path
    for module_path in ${chr_modules}; do
	if [ -r "${module_path}/${distribution}" ]; then
	    if source "${module_path}/${distribution}" ; then
		return 0
	    fi
	fi
    done

    return 1
}

chr_help () {
    cat << EOF
chr -h                                     - подсказка
chr -i debian|gentoo name [release [arch]] - установка
chr -b name                                - установка пакетов для сборки
chr -d name                                - удаление
chr -c name                                - очистка примонтированных каталогов
chr -p name                                - корневой каталог
chr -a [user] name                         - обавить пользователя
chr -u name [command]                      - использование от имени пользователя
chr -x user name [command]                 - использование от имени пользователя user
chr name [command]                         - использование
EOF
}

chr_install () {
    local distribution=${1}; [ -n "${distribution}" ] || {echo "Distribution not defined"; return 1}; shift
    local name=${1};         [ -n "${name}" ]         || {echo "Chroot name not defined";  return 1}; shift
    local hostname=$(hostname)

    local chroot_path=$(chr_path ${name})
    local home_path="${HOME}/.chr/.home/${name}"
    load_module ${distribution} || {echo "Can't load module for <${distribution}>"; return 1}

    if mkdir -p ${chroot_path} && mkdir -p ${home_path}; then
	if mod_install_distrib ${name} ${chroot_path} ${@}; then

	    # hostname.
	    echo ${hostname} | sudo tee ${chroot_path}/etc/hostname > /dev/null

	    # hosts.
	    echo 127.0.0.1 localhost ${hostname} ${name} | sudo tee ${chroot_path}/etc/hosts > /dev/null

	    # root's bash.
	    cat << EOF | sudo tee ${chroot_path}/root/.bashrc
PS1="$(tput setaf 6)chr:${name} $(tput setaf 2)#$(tput sgr0) "
PS2="$(tput setaf 2)>$(tput sgr0) "
export LANG=en_US.UTF-8
EOF

	    return 0
	else
	    echo "Can't install distribution ${@} into ${chroot_path}"
	fi
    else
	echo "Can't create root path: ${chroot_path}"
    fi

    return 1
}

chr_install_build () {
    local name=${1}; [ -n "${name}" ] || {echo "Can't run in chroot - name empty."; return 1}
    local chroot_path=$(chr_path ${name})

    if check_distribution ${chroot_path}; then

	mod_install_build ${name}

	# sudo.
	sudo sed -i 's/%sudo.*/%sudo ALL=\(ALL:ALL\) NOPASSWD:ALL/g' ${chroot_path}/etc/sudoers
	echo Defaults timestamp_timeout = 120 | sudo tee -a ${chroot_path}/etc/sudoers > /dev/null

    else
	return 1
    fi
}

chr_user_add () {
    # chr -a {user} name
    if [ "${#}" = "2" ]; then
	local chroot_user=${1}
	if [ -z $(getent passwd ${chroot_user}) ]; then
	    echo "Can't find user ${chroot_user}."
	    return 1
	fi
	shift
    else
	local chroot_user=${USER}
    fi
    local name=${1}; [ -n "${name}" ] || {echo "Can't run in chroot - name empty."; return 1}
    local chroot_path=$(chr_path ${name})

    # создание пользователя.
    local chroot_home=$(getent passwd ${chroot_user} | awk -F : '{print $6}'); [ -n "${chroot_home}" ] || {echo "Can't find user home"}
    local chroot_shell=$(getent passwd ${chroot_user} | awk -F : '{print $7}'); [ -n "${chroot_shell}" ] || {echo "Can't find user shell"}
    local chroot_id=$(getent passwd ${chroot_user} | awk -F : '{print $3}'); [ -n "${chroot_id}" ] || {echo "Can't find user id"}
    local user_gid=$(getent passwd ${chroot_user} | awk -F : '{print $4}'); [ -n "${user_gid}" ] || {echo "Can't find grop id"}

    # нужный модуль уже загружен после check_distribution.
    if check_distribution ${chroot_path}; then
	if ! mod_chroot_prepare ${name} ${chroot_path}; then
	    echo "Can't prepare chroot <${chroot_path}>."
	    return 1
	fi
    else
	if ! chroot_prepare ${name} ${chroot_path}; then
	    echo "Can't prepare chroot <${chroot_path}>."
	    return 1
	fi
    fi

    chroot_gid=$(sudo chroot ${chroot_path} getent group ${user_gid} | awk -F : '{print $3}')
    if [ -n "${chroot_gid}" ]; then

	sudo chroot ${chroot_path} useradd -m -d ${chroot_home} -g ${chroot_gid} -G sudo -s ${chroot_shell} -u ${chroot_id} ${chroot_user}

	# users's zsh.
	cat << EOF | sudo tee ${chroot_path}${chroot_home}/.zshrc
PS1="$(tput setaf 6)chr:${name} $(tput sgr0)%% "
PS2="> "

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000

setopt appendhistory autocd beep extendedglob nomatch notify
bindkey -e

autoload -Uz compinit
compinit

export LANG=en_US.UTF-8
EOF
	sudo chown ${chroot_user}:${chroot_gid} ${chroot_path}${chroot_home}/.zshrc

    else
	echo "Can't find primary group ${user_gid}"
    fi

    mod_chroot_clean ${chroot_path}
}

chr_delete () {

    if chr_clean ${@}; then
	
	local root=$(chr_path ${1})
	
	if [ -d "${root}" ]; then
	    sudo rm -rf ${root}
	fi
	
	return 0
    else
	return 1
    fi
}

chr_clean () {

    local name=${1}; [ -n "${name}" ] || {echo "Can't determine chroot - name empty."; return 1}
    local root=$(chr_path ${name})

    mount | awk '{print $3}' | grep ${root} | sort -r | xargs -n1 -r sudo umount -fl

    local mounts
    mounts=$(mount | awk '{print $3}' | grep ${root})

    if [ -z "${mounts}" ]; then
	return 0
    else
	return 1
    fi

}

chr_path () {

    local name=${1}; [ -n "${name}" ] || {echo "Can't determine chroot - name empty."; return 1}

    if  [ -n "${name}" ]; then
	echo ${chr_home%/}/${name#/}
	return 0
    else
	return 1
    fi
}

chr_run () {
    local name=${1}; [ -n "${name}" ] || {echo "Can't run in chroot - name empty."; return 1}; shift
    local chroot_path=$(chr_path ${name}); [ -d "${chroot_path}" ] || {echo "Can't run in chroot - path ${chroot_path} not found."; return 1}
    local root_shell=$(getent passwd root | awk -F : '{print $7}')
    local root_home=$(getent passwd root | awk -F : '{print $6}')

    # нужный модуль уже загружен после check_distribution.
    if check_distribution ${chroot_path}; then
	if ! mod_chroot_prepare ${name} ${chroot_path}; then
	    echo "Can't prepare chroot <${chroot_path}>."
	    return 1
	fi
    else
	if ! chroot_prepare ${name} ${chroot_path}; then
	    echo "Can't prepare chroot <${chroot_path}>."
	    return 1
	fi
    fi

    sudo SHELL=${root_shell} HOME=${root_home} \
	 LANG=en_US.UTF-8 chroot ${chroot_path} ${@}

    mod_chroot_clean ${chroot_path}

    return 0
}

chr_prepare () {
    local name=${1}; [ -n "${name}" ] || {echo "Can't run in chroot - name empty."; return 1}; shift
    local chroot_path=$(chr_path ${name}); [ -d "${chroot_path}" ] || {echo "Can't run in chroot - path ${chroot_path} not found."; return 1}
    local root_shell=$(getent passwd root | awk -F : '{print $7}')
    local root_home=$(getent passwd root | awk -F : '{print $6}')

    # нужный модуль уже загружен после check_distribution.
    if check_distribution ${chroot_path}; then
	if ! mod_chroot_prepare ${chroot_path}; then
	    echo "Can't prepare chroot <${chroot_path}>."
	    return 1
	fi
    else
	if ! chroot_prepare ${chroot_path}; then
	    echo "Can't prepare chroot <${chroot_path}>."
	    return 1
	fi
    fi

    return 0
}

chr_user_run () {
    local chroot_user=${USER}
    local name=${1}; [ -n "${name}" ] || {echo "Can't run in chroot - name empty."; return 1}; shift
    local chroot_path=$(chr_path ${name}); [ -d "${chroot_path}" ] || {echo "Can't run in chroot - path ${chroot_path} not found."; return 1}
    local user_id=$(id -nu)
    local group_id=$(id -ng)

    # нужный модуль уже загружен после check_distribution.
    if check_distribution ${chroot_path}; then
	if ! mod_chroot_prepare ${name} ${chroot_path}; then
	    echo "Can't prepare chroot <${name}>."
	    return 1
	fi
    else
	if ! chroot_prepare ${name} ${chroot_path}; then
	    echo "Can't prepare chroot <${name}>."
	    return 1
	fi
    fi

    sudo SHELL=${SHELL} HOME=${HOME} \
	LANG=en_US.UTF-8 chroot --userspec=${user_id}:${group_id} ${chroot_path} ${@}
    mod_chroot_clean ${chroot_path}

    return 0
}

command=${1}
if [ -z "${command}" ]; then
    chr_help
    exit 1
fi

case ${command} in
    -h) chr_help ;;
    -i) shift; chr_install ${@} ;;
    -b) shift; chr_install_build ${@} ;;
    -d) shift; chr_delete ${@} ;;
    -c) shift; chr_clean ${@} ;;
    -m) shift; chr_prepare ${@} ;;
    -p) shift; chr_path ${@} ;;
    -a) shift; chr_user_add ${@} ;;
    -u) shift; chr_user_run ${@} ;;
    -x) shift; chr_xuser_run ${@} ;;
    *)  chr_run ${@} ;;
esac
